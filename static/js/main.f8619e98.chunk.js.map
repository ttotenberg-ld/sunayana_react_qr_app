{"version":3,"sources":["components/qrCode.js","images/ld_logo_white.png","images/ld_logo_white_old.png","components/headerLogo.js","images/heart.svg","components/heart.js","components/customerLogo.js","images/astronaut.png","images/astronaut_old.png","components/astronaut.js","App.js","reportWebVitals.js","util/getDeviceKey.js","index.js"],"names":["withLDConsumer","_ref","flags","showQrCode","_jsxs","children","_jsx","style","color","className","QRCode","value","releaseHeaderLogo","src","ldlogo","alt","oldldlogo","releaseHeart","heart","logo","ldClient","variation","showCustomerLogo","releaseAstronaut","astronaut","oldastronaut","App","_useState","useState","_useState2","_slicedToArray","headerStyle","setHeaderStyle","configBackgroundColor","useFlags","useEffect","addResponseMessage","HeaderLDLogo","Heart","CustomerLogo","Astronaut","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getDeviceKey","deviceKey","id","ls","get","uuidv4","set","_asyncToGenerator","_regeneratorRuntime","mark","_callee","LDProvider","wrap","_context","prev","next","asyncWithLDProvider","clientSideID","context","kind","key","type","deviceType","os","osName","sent","ReactDOM","render","document","getElementById","stop"],"mappings":"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","file":"static/js/main.f8619e98.chunk.js","sourcesContent":["import QRCode from \"react-qr-code\";\nimport { withLDConsumer } from \"launchdarkly-react-client-sdk\";\n\n//Change QRURL to the URL where you'll be hosting this app\nconst QRURL = \"https://ttotenberg-ld.github.io/sunayana_react_qr_app/\";\n\nconst qrCodeHome = ({ flags }) => {\n\n    // The React SDK automatically converts flag keys with dashes and periods to camelCase.\n    // See this page for details: https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n    return flags.showQrCode ? (\n    <div>\n      <br />\n      <span style={{ color: 'black' }}><center>Scan me!</center></span>\n      <div className=\"qr-wrapper\">\n        <QRCode value={QRURL} />\n      </div>\n    </div>\n  ) : (\n    <div></div>\n  );\n};\n\nexport default withLDConsumer()(qrCodeHome);","export default __webpack_public_path__ + \"static/media/ld_logo_white.c7ccd94b.png\";","export default __webpack_public_path__ + \"static/media/ld_logo_white_old.a7492e3d.png\";","import { withLDConsumer } from \"launchdarkly-react-client-sdk\";\nimport ldlogo from \"./../images/ld_logo_white.png\";\nimport oldldlogo from \"./../images/ld_logo_white_old.png\";\n\nconst headerLogo = ({ flags }) => {\n\n  // The React SDK automatically converts flag keys with dashes and periods to camelCase.\n  // See this page for details: https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n  return flags.releaseHeaderLogo ? (\n  <div>\n    <img src={ldlogo} className=\"LD-logo\" alt=\"logo\" />\n  </div>\n  ) : (\n  <div>\n    <img src={oldldlogo} className=\"LD-logo\" alt=\"logo\" />\n  </div>\n  );\n};\n\nexport default withLDConsumer()(headerLogo);\n\n","export default __webpack_public_path__ + \"static/media/heart.3d7839e5.svg\";","import { withLDConsumer } from \"launchdarkly-react-client-sdk\";\nimport heart from \"./../images/heart.svg\";\n\nconst showHeart = ({ flags }) => {\n\n  // The React SDK automatically converts flag keys with dashes and periods to camelCase.\n  // See this page for details: https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n  return flags.releaseHeart ? (\n  <div>\n    <img src={heart} className=\"heart\" alt=\"heart\" />\n  </div>\n  ) : (\n  <div />\n  );\n};\n\nexport default withLDConsumer()(showHeart);","import { withLDConsumer } from \"launchdarkly-react-client-sdk\";\n\nconst customerLogo = ({ flags, ldClient }) => {\n  // When using the underlying Javascript SDK, flag keys with dashes and periods are used normally\n  let logo = ldClient.variation(\"config-customer-logo\");\n\n  // The React SDK automatically converts flag keys with dashes and periods to camelCase.\n  // See this page for details: https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n  return flags.showCustomerLogo ? (\n  <div>\n    <img src={logo} className=\"customer-logo\" alt=\"customerLogo\" />\n  </div>\n  ) : (\n  <div />\n  );\n};\n\nexport default withLDConsumer()(customerLogo);","export default __webpack_public_path__ + \"static/media/astronaut.1d752285.png\";","export default __webpack_public_path__ + \"static/media/astronaut_old.09554e17.png\";","import { withLDConsumer } from \"launchdarkly-react-client-sdk\";\nimport astronaut from \"./../images/astronaut.png\";\nimport oldastronaut from \"./../images/astronaut_old.png\";\n\nconst astronautLogo = ({ flags, ldClient /*, ...otherProps */ }) => {\n  \n  // The React SDK automatically converts flag keys with dashes and periods to camelCase.\n  // See this page for details: https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n  return flags.releaseAstronaut ? (\n  <div>\n    <img src={astronaut} className=\"astronaut-logo\" alt=\"logo\" />\n  </div>\n  ) : (\n  <div>\n    <img src={oldastronaut} className=\"astronaut-logo\" alt=\"logo\" />\n  </div>\n  );\n};\n\nexport default withLDConsumer()(astronautLogo);\n\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { useFlags } from \"launchdarkly-react-client-sdk\";\nimport { addResponseMessage } from 'react-chat-widget';\nimport QRCode from \"./components/qrCode\";\nimport HeaderLDLogo from \"./components/headerLogo\";\nimport Heart from \"./components/heart\";\nimport CustomerLogo from \"./components/customerLogo\";\nimport Astronaut from \"./components/astronaut\";\n\nfunction App() {\n  const [headerStyle, setHeaderStyle] = useState(\"gray-app-header\");\n  const { configBackgroundColor } = useFlags();\n\n  useEffect(() => {\n    setHeaderStyle(\"gray-app-header\");\n    const updateBackGroundColor = () => {\n      // Sets the className to \"purple-app-header\", \"blue-app-header\", etc.\n      const headerStyle = configBackgroundColor + \"-app-header\";\n      setHeaderStyle(headerStyle);\n\n      return configBackgroundColor;\n    };\n    updateBackGroundColor();\n  }, [configBackgroundColor]);\n\n\n  useEffect(() => {\n    addResponseMessage('Hi there! Ask me a question!');\n  }, []);\n\n  return (\n    <div className={headerStyle}>\n      <div className=\"black-header\">\n        <HeaderLDLogo />\n      </div>\n      \n      <div className={headerStyle}>\n        <Heart />\n        <CustomerLogo />\n        <QRCode />\n        <br />\n        <Astronaut />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v4 as uuidv4} from 'uuid';\nimport ls from 'local-storage';\n\nfunction getDeviceKey() {\n  let id;\n  if (ls.get('LD_Device_Key')) {\n    id = ls.get('LD_Device_Key');\n  } else {\n    id = uuidv4();\n    ls.set('LD_Device_Key', id)\n  }\n  return id;\n}\n\nexport default getDeviceKey;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { asyncWithLDProvider } from \"launchdarkly-react-client-sdk\";\nimport { deviceType, osName } from \"react-device-detect\";\nimport getDeviceKey from \"./util/getDeviceKey\";\n\nconst CLIENTKEY = \"6388dc685778ca1175b484fb\";\n\nlet deviceKey = getDeviceKey();\n\n(async () => {\n  const LDProvider = await asyncWithLDProvider({\n    clientSideID: CLIENTKEY,\n    context: {\n      kind: \"device\",\n      key: deviceKey,\n      //dynamically set these custom attributes using the deviceType and osName selectors from the npm package\n      type: deviceType,\n      os: osName,\n    },\n  });\n\n  ReactDOM.render(\n    <LDProvider>\n      <App />\n    </LDProvider>,\n    document.getElementById(\"root\")\n  );\n})();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}